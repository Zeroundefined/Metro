{"remainingRequest":"/Users/zhangmuren/project/Metro/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Users/zhangmuren/project/Metro/node_modules/ts-loader/index.js??ref--4-2!/Users/zhangmuren/project/Metro/src/pages/Reports/ReportsRedux.tsx","dependencies":[{"path":"/Users/zhangmuren/project/Metro/src/pages/Reports/ReportsRedux.tsx","mtime":1529848743000},{"path":"/Users/zhangmuren/project/Metro/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/zhangmuren/project/Metro/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/zhangmuren/project/Metro/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http_1 = require(\"../../utils/http\");\nconst antd_1 = require(\"antd\");\nconst prefix = 'reports/';\nvar DataType;\n(function (DataType) {\n    DataType[\"breakdown_facility_result\"] = \"faultData\";\n    DataType[\"construction_information_result\"] = \"workingData\";\n    DataType[\"facility_information_result\"] = \"equipData\";\n    DataType[\"material_information_result\"] = \"materialData\";\n    DataType[\"polling_information_result\"] = \"checkInData\";\n})(DataType || (DataType = {}));\nexports.DataType = DataType;\nconst getResultTables = () => {\n    return (dispatch) => {\n        return fetch(`${http_1.url}/getResultTables`, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((res) => res.json()).then(data => {\n            dispatch({\n                type: `${prefix}resultTables`,\n                payload: data\n            });\n            if (data.errMsg) {\n                antd_1.message.error(data.errMsg);\n            }\n            return data;\n        });\n    };\n};\nconst updateData = (selectedTable, editingItem, value) => {\n    return () => {\n        return fetch(`${http_1.url}/updateData`, {\n            method: 'POST',\n            body: JSON.stringify({\n                selectedTable,\n                editingItem,\n                value,\n                editor: 'zhouyun'\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((res) => res.json()).then(data => {\n            if (data.errMsg) {\n                antd_1.message.error(data.errMsg);\n            }\n            return data;\n        });\n    };\n};\n/** 获取原始数据 */\nconst getData = (selectedTable, timeRange, field, keyword) => {\n    return (dispatch) => {\n        return fetch(`${http_1.url}/getData?table=${selectedTable}&timeRange=${[new Date(timeRange[0]).toLocaleDateString(), new Date(timeRange[1]).toLocaleDateString()]}&keyword=${keyword}&field=${field}`, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((res) => res.json()).then(data => {\n            dispatch({\n                type: `${prefix}${DataType[selectedTable]}`,\n                payload: data\n            });\n            if (data.errMsg) {\n                antd_1.message.error(data.errMsg);\n            }\n            return data;\n        });\n    };\n};\nconst getCalcData = (timeRange) => {\n    return (dispatch) => {\n        return fetch(`${http_1.url}/getCalcData?timeRange=${[new Date(timeRange[0]).toLocaleDateString(), new Date(timeRange[1]).toLocaleDateString()]}`, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then((res) => res.json()).then(data => {\n            dispatch({\n                type: `${prefix}CalcData`,\n                payload: data\n            });\n            if (data.errMsg) {\n                antd_1.message.error(data.errMsg);\n            }\n            return data;\n        });\n    };\n};\nconst screenshot = (content) => {\n    return () => {\n        return fetch(`${http_1.url}/screenshot`, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify({\n                content,\n            }),\n        }).then((res) => res.json()).then(data => {\n            if (data.errMsg) {\n                antd_1.message.error(data.errMsg);\n            }\n            return data;\n        });\n    };\n};\nconst actions = {\n    getData,\n    updateData,\n    getResultTables,\n    screenshot,\n    getCalcData\n};\nexports.actions = actions;\nclass InitState {\n}\nexports.InitState = InitState;\nconst reducer = (state = new InitState(), action) => {\n    switch (action.type) {\n        case `${prefix}resultTables`: {\n            return Object.assign({}, state, { resultTables: action.payload });\n        }\n        case `${prefix}faultData`:\n            return Object.assign({}, state, { faultData: action.payload });\n        case `${prefix}workingData`:\n            return Object.assign({}, state, { workingData: action.payload });\n        case `${prefix}equipData`:\n            return Object.assign({}, state, { equipData: action.payload });\n        case `${prefix}materialData`:\n            return Object.assign({}, state, { materialData: action.payload });\n        case `${prefix}checkInData`:\n            return Object.assign({}, state, { checkInData: action.payload });\n        case `${prefix}CalcData`: {\n            return Object.assign({}, state, { calcData: action.payload });\n        }\n        default:\n            return state;\n    }\n};\nexports.reducer = reducer;\n",{"version":3,"file":"/Users/zhangmuren/project/Metro/src/pages/Reports/ReportsRedux.tsx","sourceRoot":"","sources":["/Users/zhangmuren/project/Metro/src/pages/Reports/ReportsRedux.tsx"],"names":[],"mappings":"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","sourcesContent":["import { url, Response } from '../../utils/http';\nimport { message } from 'antd';\n\nconst prefix = 'reports/';\n\nenum DataType {\n  'breakdown_facility_result' = 'faultData',\n  'construction_information_result' = 'workingData',\n  'facility_information_result' = 'equipData',\n  'material_information_result' = 'materialData',\n  'polling_information_result' = 'checkInData'\n}\n\nconst getResultTables = () => {\n  return (dispatch) => {\n    return fetch(`${url}/getResultTables`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then((res) => res.json()).then(data => {\n      dispatch({\n        type: `${prefix}resultTables`,\n        payload: data\n      })\n\n      if (data.errMsg) {\n        message.error(data.errMsg);\n      }\n\n      return data\n    })\n  }\n\n}\n\nconst updateData = (selectedTable, editingItem, value) => {\n  return () => {\n    return fetch(`${url}/updateData`, {\n      method: 'POST',\n      body: JSON.stringify({\n        selectedTable,\n        editingItem,\n        value,\n        editor: 'zhouyun'\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then((res) => res.json()).then(data => {\n      if (data.errMsg) {\n        message.error(data.errMsg);\n      }\n      return data;\n    });\n  }\n}\n\n/** 获取原始数据 */\nconst getData = (selectedTable, timeRange, field, keyword?) => {\n  return (dispatch) => {\n    return fetch(`${url}/getData?table=${selectedTable}&timeRange=${[new Date(timeRange[0]).toLocaleDateString(), new Date(timeRange[1]).toLocaleDateString()]}&keyword=${keyword}&field=${field}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then((res) => res.json()).then(data => {\n      dispatch({\n        type: `${prefix}${DataType[selectedTable]}`,\n        payload: data\n      })\n\n      if (data.errMsg) {\n        message.error(data.errMsg);\n      }\n      return data\n    })\n  }\n}\n\nconst getCalcData = (timeRange) => {\n  return (dispatch) => {\n    return fetch(`${url}/getCalcData?timeRange=${[new Date(timeRange[0]).toLocaleDateString(), new Date(timeRange[1]).toLocaleDateString()]}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then((res) => res.json()).then(data => {\n      dispatch({\n        type: `${prefix}CalcData`,\n        payload: data\n      })\n\n      if (data.errMsg) {\n        message.error(data.errMsg);\n      }\n      return data\n    })\n  }\n}\n\nconst screenshot = (content) => {\n  return () => {\n    return fetch(`${url}/screenshot`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        content,\n      }),\n    }).then((res) => res.json()).then(data => {\n      if (data.errMsg) {\n        message.error(data.errMsg);\n      }\n      return data\n    })\n  }\n}\n\nconst actions = {\n  getData,\n  updateData,\n  getResultTables,\n  screenshot,\n  getCalcData\n}\n\nclass InitState {\n  faultData: Response;\n  workingData: Response;\n  equipData: Response;\n  materialData: Response;\n  checkInData: Response;\n  resultTables: Response;\n  calcData: Response;\n}\n\nconst reducer = (state = new InitState(), action): InitState => {\n  switch (action.type) {\n    case `${prefix}resultTables`: {\n      return {\n        ...state,\n        resultTables: action.payload\n      }\n    }\n\n    case `${prefix}faultData`:\n      return {\n        ...state,\n        faultData: action.payload\n      }\n    case `${prefix}workingData`:\n      return {\n        ...state,\n        workingData: action.payload\n      }\n    case `${prefix}equipData`:\n      return {\n        ...state,\n        equipData: action.payload\n      }\n    case `${prefix}materialData`:\n      return {\n        ...state,\n        materialData: action.payload\n      }\n    case `${prefix}checkInData`:\n      return {\n        ...state,\n        checkInData: action.payload\n      }\n\n    case `${prefix}CalcData`: {\n      return {\n        ...state,\n        calcData: action.payload\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport { actions, reducer, InitState, DataType }"]}]}