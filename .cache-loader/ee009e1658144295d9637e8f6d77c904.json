{"remainingRequest":"/Users/zhangmuren/project/Metro/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Users/zhangmuren/project/Metro/node_modules/ts-loader/index.js??ref--4-2!/Users/zhangmuren/project/Metro/src/pages/Logs/LogsRedux.tsx","dependencies":[{"path":"/Users/zhangmuren/project/Metro/src/pages/Logs/LogsRedux.tsx","mtime":1529841201000},{"path":"/Users/zhangmuren/project/Metro/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/zhangmuren/project/Metro/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/zhangmuren/project/Metro/node_modules/ts-loader/index.js","mtime":1528433923000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http_1 = require(\"../../utils/http\");\nconst antd_1 = require(\"antd\");\nconst getLogs = () => {\n    return fetch(`${http_1.url}/getLog`, {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then((res) => res.json()).then(data => {\n        if (data.errMsg) {\n            antd_1.message.error(data.errMsg);\n        }\n        return data;\n    });\n};\nexports.getLogs = getLogs;\n",{"version":3,"file":"/Users/zhangmuren/project/Metro/src/pages/Logs/LogsRedux.tsx","sourceRoot":"","sources":["/Users/zhangmuren/project/Metro/src/pages/Logs/LogsRedux.tsx"],"names":[],"mappings":";;AAAA,2CAAiD;AACjD,+BAA+B;AAG/B,MAAM,OAAO,GAAG,GAAG,EAAE;IACjB,OAAO,KAAK,CAAC,GAAG,UAAG,SAAS,EAAE;QAC5B,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;SACnC;KACF,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QAEvC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,cAAO,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC5B;QAED,OAAO,IAAI,CAAA;IACb,CAAC,CAAC,CAAA;AACN,CAAC,CAAA;AAEQ,0BAAO","sourcesContent":["import { url, Response } from '../../utils/http';\nimport { message } from 'antd';\n\n\nconst getLogs = () => {\n    return fetch(`${url}/getLog`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then((res) => res.json()).then(data => {\n\n      if (data.errMsg) {\n        message.error(data.errMsg);\n      }\n\n      return data\n    })\n}\n\nexport { getLogs }"]}]}