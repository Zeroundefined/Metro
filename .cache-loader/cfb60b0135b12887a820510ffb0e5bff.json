{"remainingRequest":"G:\\外包\\Metro\\Metro\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-1!G:\\外包\\Metro\\Metro\\node_modules\\ts-loader\\index.js??ref--4-2!G:\\外包\\Metro\\Metro\\src\\pages\\Login\\LoginRedux.tsx","dependencies":[{"path":"G:\\外包\\Metro\\Metro\\src\\pages\\Login\\LoginRedux.tsx","mtime":1529810640000},{"path":"G:\\外包\\Metro\\Metro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":0},{"path":"G:\\外包\\Metro\\Metro\\node_modules\\thread-loader\\dist\\cjs.js","mtime":0},{"path":"G:\\外包\\Metro\\Metro\\node_modules\\ts-loader\\index.js","mtime":1528433923000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst http_1 = require(\"../../utils/http\");\r\nconst prefix = 'login/';\r\nconst login = (userName, password) => {\r\n    return (dispatch) => {\r\n        return fetch(`${http_1.url}/login`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                userName,\r\n                password\r\n            })\r\n        }).then((res) => res.json()).then(data => {\r\n            dispatch({\r\n                type: `${prefix}login`,\r\n                payload: data\r\n            });\r\n            return data;\r\n        });\r\n    };\r\n};\r\nconst actions = {\r\n    login\r\n};\r\nexports.actions = actions;\r\nclass InitState {\r\n    constructor() {\r\n        this.loginStatus = false;\r\n    }\r\n}\r\nexports.InitState = InitState;\r\nconst reducer = (state = new InitState(), action) => {\r\n    switch (action.type) {\r\n        case `${prefix}login`:\r\n            return Object.assign({}, state, { userInfo: action.payload, loginStatus: true });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexports.reducer = reducer;\r\n",{"version":3,"file":"G:\\外包\\Metro\\Metro\\src\\pages\\Login\\LoginRedux.tsx","sourceRoot":"","sources":["G:\\外包\\Metro\\Metro\\src\\pages\\Login\\LoginRedux.tsx"],"names":[],"mappings":";;AAAA,2CAAiD;AAEjD,MAAM,MAAM,GAAG,QAAQ,CAAC;AAExB,MAAM,KAAK,GAAG,CAAC,QAAgB,EAAE,QAAgB,EAAE,EAAE;IACnD,OAAO,CAAC,QAAQ,EAAE,EAAE;QAClB,OAAO,KAAK,CAAC,GAAG,UAAG,QAAQ,EAAE;YAC3B,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,QAAQ;gBACR,QAAQ;aACT,CAAC;SACH,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACvC,QAAQ,CAAC;gBACP,IAAI,EAAE,GAAG,MAAM,OAAO;gBACtB,OAAO,EAAE,IAAI;aACd,CAAC,CAAA;YACF,OAAO,IAAI,CAAA;QACb,CAAC,CAAC,CAAA;IACJ,CAAC,CAAA;AACH,CAAC,CAAA;AAED,MAAM,OAAO,GAAG;IACd,KAAK;CACN,CAAA;AAoBQ,0BAAO;AAlBhB;IAAA;QAEE,gBAAW,GAAY,KAAK,CAAC;IAC/B,CAAC;CAAA;AAe0B,8BAAS;AAbpC,MAAM,OAAO,GAAG,CAAC,KAAK,GAAG,IAAI,SAAS,EAAE,EAAE,MAAM,EAAa,EAAE;IAC7D,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,GAAG,MAAM,OAAO;YACnB,yBACK,KAAK,IACR,QAAQ,EAAE,MAAM,CAAC,OAAO,EACxB,WAAW,EAAE,IAAI,IAClB;QACH;YACE,OAAO,KAAK,CAAA;KACf;AACH,CAAC,CAAA;AAEiB,0BAAO","sourcesContent":["import { url, Response } from '../../utils/http';\n\nconst prefix = 'login/';\n\nconst login = (userName: string, password: string) => {\n  return (dispatch) => {\n    return fetch(`${url}/login`, {\n      headers: { \n        \"Content-Type\": \"application/json\"\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        userName,\n        password\n      })\n    }).then((res) => res.json()).then(data => {\n      dispatch({\n        type: `${prefix}login`,\n        payload: data\n      })\n      return data\n    })\n  }\n}\n\nconst actions = {\n  login\n}\n\nclass InitState {\n  userInfo: Response;\n  loginStatus: boolean = false;\n}\n\nconst reducer = (state = new InitState(), action): InitState => {\n  switch (action.type) {\n    case `${prefix}login`:\n      return {\n        ...state,\n        userInfo: action.payload,\n        loginStatus: true\n      }\n    default:\n      return state\n  }\n}\n\nexport { actions, reducer, InitState }"]}]}